1.  When would you want to use a remote repository rather than keeping all your work local?
    You would want to use a remote repository if you were away from your computer;
    maybe you're using a shared computer where you don't want to save files.

2.  Why might you want to always pull changes manually rather than having Git automatically 
    stay up-to-date with your remote repository?
    When you pull changes, you're bringing those changes down into your working directory.
    If you're working on changes to a file that someone else is changing at the same time,
    you would not want your changes to be superceded by the pull.

3.  Describe the differences between forks, clones, and branches. When would you use one instead of another?
	Fork on GitHub clones a repository of another user into your GitHub repository.  You would use Fork
	     if you do not have permission to change the repository you are cloning from, but you want to 
	     acknowledge the source of the files.
	Clone is used to copy a repository from GitHub to your local machine so you can modify or add to
		 the repository.
	Branch is used to create a new path from the master branch on your repository, so you can add new
	     files that may or may not end up in your final master branch. Say you want to add a new 
	     feature to your program, but you're not sure if you can get it to work.  You could branch off
	     the master and try it out:  if successful, you can merge the changes back into the master.
	     If not, no one else will be impacted by your changes, since you have it on a separate branch.

4.  What is the benefit of having a copy of the last known state of the remote stored locally?
	If you have the last known state of the remote stored locally, you can:
	-- Work offline on the program
	-- Locally compare your repository to the remote snapshot (git diff, git log...)
	   Maybe you want to make changes to a file, and you want to see if anyone else has changed it
	   since your last sync

5.  How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without Git and GitHub, you would have to track changes you made to the files yourself.  You'd have
	to come up with your own system for managing changes, and if would be hard to maintain the capability
	to roll back changes if you found an error.  Git and GitHub have overhead associated with them, like
	remembering to commit changes for each logical program change, and space to maintain all those 
	changes, but at least you have a system to manage them.  It would be easier in the short run to 
	just informally get together with your colleagues and combine your code, especially if your files are 
	separate from theirs, but in the long run, you'll have better quality if you use version control.
	 