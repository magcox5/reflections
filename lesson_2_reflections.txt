1.  What happens when you initialize a repository? Why do you need to do it?
	When you initialize a repository, you create a file to store info. about the files you want to store in the repository.
	It's the first step in version control.

2.  How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is where you put all the files you would like to put into the repository on the next commit.
	It lets you purposefully manage which files you are working with.

3.  How can you use the staging area to make sure you have one commit per logical change?
	You can add files you have changed to the staging area, then do a diff —-staging to compare what you’ve already added
	to the repository with the staging area.  You can then look thru the code you’ve changed to make sure it’s for
	one logical change.

4.  What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches would help if you are trying out an idea for your project that you may or may not want to keep, or to create
	a new version of a program for one purpose while maintaining the old program for another purpose.

5.  How do the diagrams help you visualize the branch structure?
	The diagrams help show how the commits are related, which commit is the parent of another commit, so you can trace 
	your code back to where errors occurred. 

6.  What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	When you merge 2 branches together, you combine the changes included in the 2 files.
	The diagram shows that the merged commit has 2 parents instead of just one.

7.  What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
	pros - fast and simple
	cons - may not merge correctly;  may have unintended consequences of merge







